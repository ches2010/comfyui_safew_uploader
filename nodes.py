# nodes.py
import os
import json
import requests
import folder_paths
from PIL import Image
import numpy as np
import io

# 配置文件路径
CONFIG_FILE = os.path.join(os.path.dirname(__file__), "config.json")

# 确保配置文件存在
def ensure_config():
    if not os.path.exists(CONFIG_FILE):
        with open(CONFIG_FILE, 'w', encoding='utf-8') as f:
            json.dump({"default": {"token": "", "chat_id": ""}}, f, indent=2, ensure_ascii=False)

ensure_config()

# 读取配置
def load_configs():
    try:
        with open(CONFIG_FILE, 'r', encoding='utf-8') as f:
            return json.load(f)
    except:
        return {"default": {"token": "", "chat_id": ""}}

# 获取配置
def get_config(name):
    configs = load_configs()
    return configs.get(name, configs.get("default", {}))


# -----------------------------
# 节点 1：SafeW Config
# -----------------------------
class SafeWConfigNode:
    def __init__(self):
        pass

    @classmethod
    def INPUT_TYPES(cls):
        configs = load_configs()
        return {
            "required": {
                "preset": (list(configs.keys()),),
                "token": ("STRING", {
                    "default": "",
                    "multiline": False,
                    "placeholder": "Bot Token (leave empty to use preset)"
                }),
                "chat_id": ("STRING", {
                    "default": "",
                    "multiline": False,
                    "placeholder": "Chat ID or @username (leave empty to use preset)"
                })
            }
        }

    RETURN_TYPES = ("SAFECFG",)
    FUNCTION = "save"
    CATEGORY = "SafeW"

    def save(self, preset, token, chat_id):
        configs = load_configs()
        config = configs.get(preset, {})

        # 优先使用输入值，否则用配置
        final_token = token if token.strip() else config.get("token", "")
        final_chat_id = chat_id if chat_id.strip() else config.get("chat_id", "")

        return ((final_token, final_chat_id), )


# -----------------------------
# 节点 2：SafeW Upload
# -----------------------------
class SafeWUploadNode:
    def __init__(self):
        self.output_dir = folder_paths.get_output_directory()

    @classmethod
    def INPUT_TYPES(cls):
        return {
            "required": {
                "config": ("SAFECFG",),
                "upload_type": (["photo", "video", "document"], {"default": "photo"}),
                "caption": ("STRING", {
                    "default": "Generated by ComfyUI",
                    "multiline": True
                }),
                "disable_notification": ("BOOLEAN", {"default": False}),
                "protect_content": ("BOOLEAN", {"default": True}),
                "has_spoiler": ("BOOLEAN", {"default": False})
            },
            "optional": {
                "images": ("IMAGE",),
                "videos": ("VIDEO",),  # 假设 ComfyUI 未来支持 VIDEO 类型，否则用路径
                "files": ("STRING", {"forceInput": True})  # 文件路径（如 .pdf, .zip）
            }
        }

    RETURN_TYPES = ()
    FUNCTION = "upload"
    OUTPUT_NODE = True
    CATEGORY = "SafeW"

    def upload(self, config, upload_type, caption, disable_notification, protect_content, has_spoiler, images=None, videos=None, files=None):
        token, chat_id = config
        if not token or not chat_id:
            raise Exception("❌ Token 或 Chat ID 未设置！")

        results = []
        base_url = f"https://api.safew.org/bot{token}"

        # 处理图像
        if upload_type == "photo" and images is not None:
            url = f"{base_url}/sendPhoto"
            for img in images:
                try:
                    i = 255. * img.cpu().numpy()
                    img_pil = Image.fromarray(np.clip(i, 0, 255).astype(np.uint8))
                    buf = io.BytesIO()
                    img_pil.save(buf, format='PNG')
                    buf.seek(0)
                    files_data = {'photo': ('image.png', buf, 'image/png')}
                    data = {
                        'chat_id': chat_id,
                        'caption': caption,
                        'disable_notification': disable_notification,
                        'protect_content': protect_content
                    }
                    if has_spoiler:
                        data['has_spoiler'] = True

                    r = requests.post(url, data=data, files=files_data)
                    res = r.json()
                    if res.get("ok"):
                        results.append({"filename": "safew_photo.png", "subfolder": "", "type": "output"})
                except Exception as e:
                    print(f"[SafeW] Photo upload failed: {e}")
                    results.append({"error": str(e)})

        # TODO: 视频上传（需 ComfyUI 支持输出路径）
        elif upload_type == "video" and videos is not None:
            # 这里假设 videos 是文件路径列表（未来可扩展）
            pass  # 暂留接口

        # 通用文件上传（支持任意类型）
        elif upload_type == "document" and files is not None:
            url = f"{base_url}/sendDocument"
            file_path = folder_paths.get_annotated_filepath(files)
            try:
                with open(file_path, 'rb') as f:
                    files_data = {'document': (os.path.basename(file_path), f, 'application/octet-stream')}
                    data = {
                        'chat_id': chat_id,
                        'caption': caption,
                        'disable_notification': disable_notification,
                        'protect_content': protect_content
                    }
                    r = requests.post(url, data=data, files=files_data)
                    res = r.json()
                    if res.get("ok"):
                        results.append({"filename": os.path.basename(file_path), "subfolder": "", "type": "output"})
                    else:
                        raise Exception(res.get("description"))
            except Exception as e:
                print(f"[SafeW] Document upload failed: {e}")
                results.append({"error": str(e)})

        return {"ui": {"images": results}}
