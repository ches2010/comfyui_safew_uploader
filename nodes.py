# nodes.py
import os
import requests
import folder_paths
from PIL import Image
import numpy as np
import io

class SafeWUploadNode:
    def __init__(self):
        self.output_dir = folder_paths.get_output_directory()

    @classmethod
    def INPUT_TYPES(cls):
        return {
            "required": {
                "images": ("IMAGE",),
                "token": ("STRING", {
                    "default": "",
                    "multiline": False,
                    "placeholder": "Enter your SafeW bot token"
                }),
                "chat_id": ("STRING", {
                    "default": "",
                    "multiline": False,
                    "placeholder": "@channel_username or -100123456789"
                }),
                "caption": ("STRING", {
                    "default": "Generated by ComfyUI",
                    "multiline": True
                }),
                "disable_notification": ("BOOLEAN", {"default": False}),
                "protect_content": ("BOOLEAN", {"default": True}),
                "has_spoiler": ("BOOLEAN", {"default": False})
            }
        }

    RETURN_TYPES = ()
    FUNCTION = "upload"
    OUTPUT_NODE = True
    CATEGORY = "SafeW"

    def upload(self, images, token, chat_id, caption, disable_notification, protect_content, has_spoiler):
        results = []
        upload_url = f"https://api.safew.org/bot{token}/sendPhoto"

        for image in images:
            # 转为 PIL Image
            i = 255. * image.cpu().numpy()
            img = Image.fromarray(np.clip(i, 0, 255).astype(np.uint8))

            # 保存到临时缓冲区
            buf = io.BytesIO()
            img.save(buf, format='PNG')
            buf.seek(0)

            # 发送请求
            files = {'photo': ('image.png', buf, 'image/png')}
            data = {
                'chat_id': chat_id,
                'caption': caption,
                'disable_notification': disable_notification,
                'protect_content': protect_content
            }
            if has_spoiler:
                data['has_spoiler'] = True

            try:
                response = requests.post(upload_url, data=data, files=files)
                result = response.json()
                if result.get("ok"):
                    results.append({"filename": "safew_upload.png", "subfolder": "", "type": "output"})
                else:
                    raise Exception(f"API Error: {result.get('description')}")
            except Exception as e:
                print(f"[SafeW Upload] Error: {e}")
                results.append({"error": str(e)})

        return {"ui": {"images": results}}
